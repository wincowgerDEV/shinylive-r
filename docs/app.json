[{"name":"app.R","content":"# Forecasting Sandbox ----\r\n# This is an example for a Shinylive R app\r\n# The app provides a forecasting sandbox for the AirPassengers dataset\r\n# It supports 3 stats forecasting models - Linear Regression, ARIMA, and Holt-Winters\r\n\r\nlibrary(shiny)\r\ndata(AirPassengers)\r\n\r\n# UI ----\r\nui <- fluidPage(\r\n\r\n  # App title ----\r\n  titlePanel(\"Forecasting Sandbox\"),\r\n  sidebarLayout(\r\n\r\n    sidebarPanel(width = 3,\r\n        selectInput(inputId = \"model\",\r\n                    label = \"Select Model\",\r\n                    choices = c(\"Linear Regression\", \"ARIMA\", \"Holt-Winters\"),\r\n                    selected = \"Linear Regression\"),\r\n        # Linear Regression model arguments\r\n        conditionalPanel(condition = \"input.model == 'Linear Regression'\",\r\n                         checkboxGroupInput(inputId = \"lm_args\", \r\n                         label = \"Select Regression Features:\", \r\n                         choices = list(\"Trend\" = 1, \r\n                                        \"Seasonality\" = 2),\r\n                         selected = 1)),\r\n        # ARIMA model arguments\r\n        conditionalPanel(condition = \"input.model == 'ARIMA'\",\r\n                             h5(\"Order Parameters\"),\r\n                              sliderInput(inputId = \"p\",\r\n                                          label = \"p:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0),\r\n                            sliderInput(inputId = \"d\",\r\n                                          label = \"d:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0),\r\n                            sliderInput(inputId = \"q\",\r\n                                          label = \"q:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0),\r\n                            h5(\"Seasonal Parameters:\"),\r\n                            sliderInput(inputId = \"P\",\r\n                                          label = \"P:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0),\r\n                            sliderInput(inputId = \"D\",\r\n                                          label = \"D:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0),\r\n                            sliderInput(inputId = \"Q\",\r\n                                          label = \"Q:\",\r\n                                          min = 0,\r\n                                          max = 5,\r\n                                          value = 0)\r\n        ),\r\n        # Holt Winters model arguments\r\n        conditionalPanel(condition = \"input.model == 'Holt-Winters'\",\r\n                         checkboxGroupInput(inputId = \"hw_args\", \r\n                         label = \"Select Holt-Winters Parameters:\", \r\n                         choices = list(\"Beta\" = 2, \r\n                                        \"Gamma\" = 3),\r\n                         selected = c(1, 2, 3)),\r\n                          selectInput(inputId = \"hw_seasonal\",\r\n                                      label = \"Select Seasonal Type:\",\r\n                                      choices = c(\"Additive\", \"Multiplicative\"),\r\n                                      selected = \"Additive\")),\r\n        \r\n        checkboxInput(inputId = \"log\", \r\n                    label = \"Log Transformation\",\r\n                    value = FALSE),\r\n      sliderInput(inputId = \"h\",\r\n                  label = \"Forecasting Horizon:\",\r\n                  min = 1,\r\n                  max = 60,\r\n                  value = 24)\r\n                #   actionButton(inputId = \"update\",\r\n                #                 label = \"Update!\")\r\n\r\n    ),\r\n\r\n    # Main panel for displaying outputs ----\r\n    mainPanel(width = 9,\r\n      # Forecast Plot ----\r\n     plotOutput(outputId = \"fc_plot\",\r\n                height = \"400px\")\r\n\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n# Load the dataset a reactive object\r\n    d <- reactiveValues(df = data.frame(input = as.numeric(AirPassengers), \r\n                 index = seq.Date(from = as.Date(\"1949-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = length(AirPassengers))),\r\n                        air = AirPassengers)\r\n\r\n# Log transformation \r\n    observeEvent(input$log,{\r\n        if(input$log){\r\n            d$df <- data.frame(input = log(as.numeric(AirPassengers)), \r\n                 index = seq.Date(from = as.Date(\"1949-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = length(AirPassengers)))\r\n            \r\n            d$air <- log(AirPassengers)\r\n        } else {\r\n            d$df <- data.frame(input = as.numeric(AirPassengers), \r\n                 index = seq.Date(from = as.Date(\"1949-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = length(AirPassengers)))\r\n            \r\n            d$air <- AirPassengers\r\n        }\r\n    })\r\n\r\n# The forecasting models execute under the plot render\r\n  output$fc_plot <- renderPlot({\r\n\r\n    # if adding a prediction intervals level argument set over here\r\n    pi <- 0.95\r\n\r\n    # Holt-Winters model\r\n    if(input$model == \"Holt-Winters\"){\r\n       a <- b <- c <- NULL\r\n\r\n       if(!\"2\" %in% input$hw_args){\r\n        b <- FALSE\r\n       }\r\n\r\n       if(!\"3\" %in% input$hw_args){\r\n        c <- FALSE\r\n       }\r\n\r\n        md <- HoltWinters(d$air, \r\n                          seasonal = ifelse(input$hw_seasonal == \"Additive\", \"additive\", \"multiplicative\"),\r\n                          beta = b,\r\n                          gamma = c\r\n                          )\r\n        fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\r\n                as.data.frame()\r\n        fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = input$h)\r\n    # ARIMA model\r\n    } else if(input$model == \"ARIMA\"){\r\n        \r\n        md <- arima(d$air,\r\n                    order = c(input$p, input$d, input$q),\r\n                    seasonal = list(order = c(input$P, input$D, input$Q))\r\n                          )\r\n        fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\r\n                as.data.frame() \r\n        names(fc) <- c(\"fit\", \"se\")\r\n\r\n        fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = input$h)\r\n\r\n        fc$upr <- fc$fit + 1.96 * fc$se\r\n        fc$lwr <- fc$fit - 1.96 * fc$se\r\n    # Linear Regression model\r\n    } else if(input$model == \"Linear Regression\"){\r\n\r\n        d_lm <- d$df\r\n\r\n        d_fc <- data.frame(index = seq.Date(from = as.Date(\"1961-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = input$h))\r\n\r\n        if(\"1\" %in% input$lm_args){\r\n            d_lm$trend <- 1:nrow(d_lm)\r\n            d_fc$trend <- (max(d_lm$trend) + 1):(max(d_lm$trend) + input$h)\r\n        }\r\n\r\n        if(\"2\" %in% input$lm_args){\r\n            d_lm$season <- as.factor(months((d_lm$index)))\r\n            d_fc$season <- factor(months((d_fc$index)), levels = levels(d_lm$season))\r\n        }\r\n\r\n        md <- lm(input ~ ., data = d_lm[, - which(names(d_lm) == \"index\")])\r\n                          \r\n        fc <- predict(md, n.ahead = input$h, interval = \"prediction\",\r\n        level = pi, newdata = d_fc) |>\r\n                as.data.frame() \r\n        \r\n\r\n        fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\r\n                                  by = \"month\",\r\n                                  length.out = input$h)\r\n\r\n    }\r\n\r\n# Setting the plot\r\n    at_x <- pretty(seq.Date(from = min(d$df$index),\r\n                     to = max(fc$index),\r\n                     by = \"month\"))\r\n\r\n    at_y <- c(pretty(c(d$df$input, fc$upr)), 1200)\r\n\r\n    plot(x = d$df$index, y = d$df$input,\r\n        col = \"#1f77b4\",\r\n        type = \"l\",\r\n        frame.plot = FALSE,\r\n        axes = FALSE,\r\n        panel.first = abline(h = at_y, col = \"grey80\"),\r\n        main = \"AirPassengers Forecast\",\r\n        xlim = c(min(d$df$index), max(fc$index)),\r\n        ylim = c(min(c(min(d$df$input), min(fc$lwr))), max(c(max(fc$upr), max(d$df$input)))),\r\n        xlab = paste(\"Model:\", input$model, sep = \" \"),\r\n        ylab = \"Num. of Passengers (in Thousands)\")\r\n    mtext(side =1, text = format(at_x, format = \"%Y-%M\"), at = at_x,\r\n      col = \"grey20\", line = 1, cex = 0.8)\r\n\r\nmtext(side =2, text = format(at_y, scientific = FALSE), at = at_y,\r\n      col = \"grey20\", line = 1, cex = 0.8)\r\n    lines(x = fc$index, y = fc$fit, col = '#1f77b4', lty = 2, lwd = 2)\r\n  lines(x = fc$index, y = fc$upr, col = 'blue', lty = 2, lwd = 2)\r\n  lines(x = fc$index, y = fc$lwr, col = 'blue', lty = 2, lwd = 2)\r\n\r\n    })\r\n\r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
